pipeline {
  agent {
    node {
      label 'maven'
    }
  }

    parameters {
        string(name:'TAG_NAME',defaultValue: '',description:'')
    }

    environment {
        DOCKER_CREDENTIAL_ID = 'pz-aliyun-dockerhub-id'
        GITHUB_CREDENTIAL_ID = 'pz-gitee-id'
        KUBECONFIG_CREDENTIAL_ID = 'pz-kubeconfig'
        REGISTRY = 'registry.cn-shenzhen.aliyuncs.com'
        DOCKERHUB_NAMESPACE = 'cqkxzyi'
        GITHUB_ACCOUNT = 'cqkxzyi'
        APP_NAME = 'devops-java-sample'
    }
    def a=123

    stages {
        stage ('checkout scm') {
            steps {
                checkout(scm)
            }
        }

        stage ('unit test') {
            steps {
                container ('maven') {
                    sh 'mvn clean test'
                    sh 'echo 环境变量REGISTRY=$REGISTRY'

                    sh '''
                        echo "开始测试3个单引号"
                        echo ${a}
                        echo 环境变量REGISTRY=$REGISTRY
                       '''

                    sh """
                        echo "开始测试3个双引号"
                        echo ${a}
                        echo 环境变量REGISTRY=$REGISTRY
                       """
                }
            }
        }
 
        stage ('build & push') {
            steps {
                container ('maven') {
                    sh 'mvn clean package -DskipTests'
                    sh 'docker build -f Dockerfile-online -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .'
                    withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "$DOCKER_CREDENTIAL_ID" ,)]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                        sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER'
                        sh 'echo "编译 & 推送 成功！"'
                    }
                }
            }
        }


        stage('发布测试') {
          when{
            branch 'master'
          }
          steps {
            //input(id: 'deploy-to-dev', message: 'deploy to dev?')
            container ('maven') {
                // sh 'kubectl version --short --client'
                withCredentials([
                    kubeconfigFile(
                    credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
                    variable: 'KUBECONFIG_CONTENT')
                    ])
                    sh '''
                        echo "开始发布测试"
                        mkdir ~/.kube
                        echo "$KUBECONFIG_CONTENT" > ~/.kube/config
                        envsubst < deploy/dev-all-in-one/devops-sample.yaml | kubectl apply -f -
                       '''
            }
          }
        }

        stage('发布生产') {
          when{
            expression{
              return params.TAG_NAME =~ /v.*/
            }
          }
          steps {
            input(id: 'deploy-to-production', message: '是否发布生产?')
            container ('maven') {
                withCredentials([
                    kubeconfigFile(
                    credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
                    variable: 'KUBECONFIG')
                    ]) {
                    sh 'envsubst < deploy/prod-all-in-one/devops-sample.yaml | kubectl apply -f -'
                }
            }
          }
        }
    }
}
